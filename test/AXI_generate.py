from VHDL import VHDL 
from top import top

class AXI_generate:
    def __init__(self, nom_axi, *archivos):
        self.name = nom_axi
        self.archivos = archivos


    def generate_AXI(self):
        for fichero in self.archivos:
            self.vhdl = VHDL(fichero)

        nombre = self.name + ".vhd"
        file = open(nombre, 'w')
        text = self.generate_IP()
        file.write(text)
        file.close()

        nombre_IPIF = self.name + "_S00_AXI.vhd"
        file1 = open(nombre_IPIF, 'w')
        text1 = self.generate_IPIF()
        file1.write(text1)
        file1.close()
        

    def generate_IP(self):
        wr = "library ieee;"
        wr += "\nuse ieee.std_logic_1164.all;"
        wr += "\nuse ieee.numeric_std.all;\n"
        wr += "\nentity " + self.name + " is"
        wr += "\n\tgeneric ("
        wr += "\n\t\t-- Users to add parameters here\n"
        wr += "\n\t\t-- User parameters ends"
        wr += "\n\n\t\t-- Do not modify the parameters beyond this line\n\n"
        wr += "\n\t\t-- Parameters of Axi Slave Bus Interface S00_AXI"
        wr += "\n\t\tC_S00_AXI_DATA_WIDTH	: integer	:= 32;"
        wr += "\n\t\tC_S00_AXI_ADDR_WIDTH	: integer	:= 4"
        wr += "\n\t\t);\n\tport (\n\t\t-- Users to add ports here"
        wr += "\n\n\t\t-- User ports ends\n\t\t-- Do not modify the ports beyond this line\n\n\n\t\t-- Ports of Axi Slave Bus Interface S00_AXI"
        wr += "\n\t\ts00_axi_aclk	: in std_logic;"
        wr += "\n\t\ts00_axi_aresetn	: in std_logic;"
        wr += "\n\t\tss00_axi_awaddr	: in std_logic_vector(C_S00_AXI_ADDR_WIDTH-1 downto 0);"
        wr += "\n\t\ts00_axi_awprot	: in std_logic_vector(2 downto 0);"
        wr += "\n\t\tss00_axi_awvalid	: in std_logic;"
        wr += "\n\t\tss00_axi_awready	: out std_logic;"
        wr += "\n\t\ts00_axi_wdata	: in std_logic_vector(C_S00_AXI_DATA_WIDTH-1 downto 0);"
        wr += "\n\t\ts00_axi_wstrb	: in std_logic_vector((C_S00_AXI_DATA_WIDTH/8)-1 downto 0);"
        wr += "\n\t\ts00_axi_wvalid	: in std_logic;"
        wr += "\n\t\ts00_axi_wready	: out std_logic;"
        wr += "\n\t\ts00_axi_bresp	: out std_logic_vector(1 downto 0);"
        wr += "\n\t\ts00_axi_bvalid	: out std_logic;"
        wr += "\n\t\ts00_axi_bready	: in std_logic;"
        wr += "\n\t\ts00_axi_araddr	: in std_logic_vector(C_S00_AXI_ADDR_WIDTH-1 downto 0);"
        wr += "\n\t\ts00_axi_arprot	: in std_logic_vector(2 downto 0);"
        wr += "\n\t\ts00_axi_arvalid	: in std_logic;"
        wr += "\n\t\ts00_axi_arready	: out std_logic;"
        wr += "\n\t\ts00_axi_rdata	: out std_logic_vector(C_S00_AXI_DATA_WIDTH-1 downto 0);"
        wr += "\n\t\tss00_axi_rresp	: out std_logic_vector(1 downto 0);"
        wr += "\n\t\ts00_axi_rvalid	: out std_logic;"
        wr += "\n\t\ts00_axi_rready	: in std_logic"
        wr += "\n\t);"
        wr += "\nend " + self.name + ";"
        wr += "\n\narchitecture arch_" + self.name + " of " + self.name + " is\n"
        wr += "\n\t-- component declaration"
        wr += "\n\tcomponent " + self.name + "_SOO_AXI is"
        wr += "\n\t\tgeneric ("
        wr += "\n\t\tC_S_AXI_DATA_WIDTH	: integer	:= 32;"
        wr += "\n\t\tC_S_AXI_ADDR_WIDTH	: integer	:= 4"
        wr += "\n\t\t);"
        wr += "\n\t\tport ("
        wr += "\n\t\tS_AXI_ACLK	: in std_logic;"
        wr += "\n\t\tS_AXI_ARESETN	: in std_logic;"
        wr += "\n\t\tS_AXI_AWADDR	: in std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);"
        wr += "\n\t\tS_AXI_AWPROT	: in std_logic_vector(2 downto 0);"
        wr += "\n\t\tS_AXI_AWVALID	: in std_logic;"
        wr += "\n\t\tS_AXI_AWREADY	: out std_logic;"
        wr += "\n\t\tS_AXI_WDATA	: in std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);"
        wr += "\n\t\tS_AXI_WSTRB	: in std_logic_vector((C_S_AXI_DATA_WIDTH/8)-1 downto 0);"
        wr += "\n\t\tS_AXI_WVALID	: in std_logic;"
        wr += "\n\t\tS_AXI_WREADY	: out std_logic;"
        wr += "\n\t\tS_AXI_BRESP	: out std_logic_vector(1 downto 0);"
        wr += "\n\t\tS_AXI_BVALID	: out std_logic;"
        wr += "\n\t\tS_AXI_BREADY	: in std_logic;"
        wr += "\n\t\tS_AXI_ARADDR	: in std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);"
        wr += "\n\t\tS_AXI_ARPROT	: in std_logic_vector(2 downto 0);"
        wr += "\n\t\tS_AXI_ARVALID	: in std_logic;"
        wr += "\n\t\tS_AXI_ARREADY	: out std_logic;"
        wr += "\n\t\tS_AXI_RDATA		: out std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);"
        wr += "\n\t\tS_AXI_RRESP		: out std_logic_vector(1 downto 0);"
        wr += "\n\t\tS_AXI_RVALID	: out std_logic;"
        wr += "\n\t\tS_AXI_RREADY	: in std_logic"
        wr += "\n\t\t);"
        wr += "\n\tend component " + self.name + "_S00_AXI;"
        wr += "\n\nbegin\n"
        wr += "\n-- Instantiation of Axi Bus Interface S00_AXI"
        wr += "\n" + self.name + "_S00_AXI_inst : " + self.name + "_S00_AXI"
        wr += "\n\tgeneric map ("
        wr += "\n\t\tC_S_AXI_DATA_WIDTH	=> C_S00_AXI_DATA_WIDTH,"
        wr += "\n\t\tC_S_AXI_ADDR_WIDTH	=> C_S00_AXI_ADDR_WIDTH"
        wr += "\n\t)"
        wr += "\n\tport map("
        wr += "\n\t\tS_AXI_ACLK	=> s00_axi_aclk,"
        wr += "\n\t\tS_AXI_ARESETN	=> s00_axi_aresetn,"
        wr += "\n\t\tS_AXI_AWADDR	=> s00_axi_awaddr,"
        wr += "\n\t\tS_AXI_AWPROT	=> s00_axi_awprot,"
        wr += "\n\t\tS_AXI_AWVALID	=> s00_axi_awvalid,"
        wr += "\n\t\tS_AXI_AWREADY	=> s00_axi_awready,"
        wr += "\n\t\tS_AXI_WDATA	=> s00_axi_wdata,"
        wr += "\n\t\tS_AXI_WSTRB	=> s00_axi_wstrb,"
        wr += "\n\t\tS_AXI_WVALID	=> s00_axi_wvalid,"
        wr += "\n\t\tS_AXI_WREADY	=> s00_axi_wready,"
        wr += "\n\t\tS_AXI_BRESP	=> s00_axi_bresp,"
        wr += "\n\t\tS_AXI_BVALID	=> s00_axi_bvalid,"
        wr += "\n\t\tS_AXI_BREADY	=> s00_axi_bready,"
        wr += "\n\t\tS_AXI_ARADDR	=> s00_axi_araddr,"
        wr += "\n\t\tS_AXI_ARPROT	=> s00_axi_arprot,"
        wr += "\n\t\tS_AXI_ARVALID	=> s00_axi_arvalid,"
        wr += "\n\t\tS_AXI_ARREADY	=> s00_axi_arready,"
        wr += "\n\t\tS_AXI_RDATA	=> s00_axi_rdata,"
        wr += "\n\t\tS_AXI_RRESP	=> s00_axi_rresp,"
        wr += "\n\t\tS_AXI_RVALID	=> s00_axi_rvalid,"
        wr += "\n\t\tS_AXI_RREADY	=> s00_axi_rready"
        wr += "\n\t);"
        wr += "\n\n\t-- Add user logic here"
        wr += "\n\n\t-- User logic ends"
        wr += "\n\nend arch_"+ self.name + ";"

        return wr

    def generate_IPIF(self):
        wr = "library ieee;"
        wr += "\nuse ieee.std_logic_1164.all;"
        wr += "\nuse ieee.numeric_std.all;\n"
        wr += "entity " + self.name + "_S00_AXI is"
        wr += "\n\tgeneric ("
        wr += "\n\t\t-- Users to add parameters here\n"
        wr += "\n\t\t-- User parameters ends"
        wr += "\n\t\t-- Do not modify the parameters beyond this line\n"
        wr += "\n\t\t-- Width of S_AXI data bus"
        wr += "\n\t\tC_S_AXI_DATA_WIDTH	: integer	:= 32;"
        wr += "\n\t\t-- Width of S_AXI address bus"
        wr += "\n\t\tC_S_AXI_ADDR_WIDTH	: integer	:= 4"
        wr += "\n\t);"
        wr += "\n\tport ("
        wr += "\n\t\t-- Users to add ports here\n"
        wr += "\n\t\t-- User ports ends"
        wr += "\n\t\t-- Do not modify the ports beyond this line\n"
        wr += "\n\t\t-- Global Clock Signal"
        wr += "\n\t\tS_AXI_ACLK	: in std_logic;"
        wr += "\n\t\t-- Global Reset Signal. This Signal is Active LOW"
        wr += "\n\t\tS_AXI_ARESETN	: in std_logic;"
        wr += "\n\t\t-- Write address (issued by master, acceped by Slave)"
        wr += "\n\t\tS_AXI_AWADDR	: in std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);"
        wr += "\n\t\t-- Write channel Protection type. This signal indicates the"
        wr += "\n\t\t\t-- privilege and security level of the transaction, and whether"
        wr += "\n\t\t\t-- the transaction is a data access or an instruction access."
        wr += "\n\t\tS_AXI_AWPROT	: in std_logic_vector(2 downto 0);"
        wr += "\n\t\t-- Write address valid. This signal indicates that the master signaling"
        wr += "\n\t\t\t-- valid write address and control information."
        wr += "\n\t\tS_AXI_AWVALID	: in std_logic;"
        wr += "\n\t\t-- Write address ready. This signal indicates that the slave is ready"
        wr += "\n\t\t\t-- to accept an address and associated control signals."
        wr += "\n\t\tS_AXI_AWREADY	: out std_logic;"
        wr += "\n\t\t-- Write data (issued by master, acceped by Slave) "
        wr += "\n\t\tS_AXI_WDATA	: in std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);"
        wr += "\n\t\t-- Write strobes. This signal indicates which byte lanes hold"
        wr += "\n\t\t\t-- valid data. There is one write strobe bit for each eight"
        wr += "\n\t\t\t-- bits of the write data bus.    "
        wr += "\n\t\tS_AXI_WSTRB	: in std_logic_vector((C_S_AXI_DATA_WIDTH/8)-1 downto 0);"
        wr += "\n\t\t-- Write valid. This signal indicates that valid write"
        wr += "\n\t\t\t-- data and strobes are available."
        wr += "\n\t\tS_AXI_WVALID	: in std_logic;"
        wr += "\n\t\t-- Write ready. This signal indicates that the slave"
        wr += "\n\t\t\t-- can accept the write data."
        wr += "\n\t\tS_AXI_WREADY	: out std_logic;"
        wr += "\n\t\t-- Write response. This signal indicates the status"
        wr += "\n\t\t\t-- of the write transaction."
        wr += "\n\t\tS_AXI_BRESP	: out std_logic_vector(1 downto 0);"
        wr += "\n\t\t-- Write response valid. This signal indicates that the channel"
        wr += "\n\t\t\t-- is signaling a valid write response."
        wr += "\n\t\tS_AXI_BVALID	: out std_logic;"
        wr += "\n\t\t-- Response ready. This signal indicates that the master"
        wr += "\n\t\t\t-- can accept a write response."
        wr += "\n\t\tS_AXI_BREADY	: in std_logic;"
        wr += "\n\t\t-- Read address (issued by master, acceped by Slave)"
        wr += "\n\t\tS_AXI_ARADDR	: in std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);"
        wr += "\n\t\t-- Protection type. This signal indicates the privilege"
        wr += "\n\t\t\t-- and security level of the transaction, and whether the"
        wr += "\n\t\t\t-- transaction is a data access or an instruction access."
        wr += "\n\t\tS_AXI_ARPROT	: in std_logic_vector(2 downto 0);"
        wr += "\n\t\t-- Read address valid. This signal indicates that the channel"
        wr += "\n\t\t\t-- is signaling valid read address and control information."
        wr += "\n\t\tS_AXI_ARVALID	: in std_logic;"
        wr += "\n\t\t-- Read address ready. This signal indicates that the slave is"
        wr += "\n\t\t\t-- ready to accept an address and associated control signals."
        wr += "\n\t\tS_AXI_ARREADY	: out std_logic;"
        wr += "\n\t\t-- Read data (issued by slave)"
        wr += "\n\t\tS_AXI_RDATA	: out std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);"
        wr += "\n\t\t-- Read response. This signal indicates the status of the"
        wr += "\n\t\t\t-- read transfer."
        wr += "\n\t\tS_AXI_RRESP	: out std_logic_vector(1 downto 0);"
        wr += "\n\t\t-- Read valid. This signal indicates that the channel is"
        wr += "\n\t\t\t-- signaling the required read data."
        wr += "\n\t\tS_AXI_RVALID	: out std_logic;"
        wr += "\n\t\t-- Read ready. This signal indicates that the master can"
        wr += "\n\t\t\t-- accept the read data and response information."
        wr += "\n\t\tS_AXI_RREADY	: in std_logic"
        wr += "\n\t);"
        wr += "\nend " + self.name + "_S00_AXI;\n"
        wr += "\narchitecture arch_" + self.name + " of " + self.name + "_S00_AXI is\n"
        wr += "\n\t-- AXI4LITE signals"
        wr += "\n\tsignal axi_awaddr	: std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);"
        wr += "\n\tsignal axi_awready	: std_logic;"
        wr += "\n\tsignal axi_wready	: std_logic;"
        wr += "\n\tsignal axi_bresp	: std_logic_vector(1 downto 0);"
        wr += "\n\tsignal axi_bvalid	: std_logic;"
        wr += "\n\tsignal axi_araddr	: std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);"
        wr += "\n\tsignal axi_arready	: std_logic;"
        wr += "\n\tsignal axi_rdata	: std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);"
        wr += "\n\tsignal axi_rresp	: std_logic_vector(1 downto 0);"
        wr += "\n\tsignal axi_rvalid	: std_logic;\n"
        wr += "\n\t-- Example-specific design signals"
        wr += "\n\t-- local parameter for addressing 32 bit / 64 bit C_S_AXI_DATA_WIDTH"
        wr += "\n\t-- ADDR_LSB is used for addressing 32/64 bit registers/memories"
        wr += "\n\t-- ADDR_LSB = 2 for 32 bits (n downto 2)"
        wr += "\n\t-- ADDR_LSB = 3 for 64 bits (n downto 3)"
        wr += "\n\tconstant ADDR_LSB  : integer := (C_S_AXI_DATA_WIDTH/32)+ 1;"
        wr += "\n\tconstant OPT_MEM_ADDR_BITS : integer := 1;"
        wr += "\n\t------------------------------------------------"
        wr += "\n\t---- Signals for user logic register space example"
        wr += "\n\t--------------------------------------------------"
        wr += "\n\t---- Number of Slave Registers 4"
        wr += "\n\tsignal slv_reg0	:std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);"
        wr += "\n\tsignal slv_reg1	:std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);"
        wr += "\n\tsignal slv_reg2	:std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);"
        wr += "\n\tsignal slv_reg3	:std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);"
        wr += "\n\tsignal slv_reg_rden	: std_logic;"
        wr += "\n\tsignal slv_reg_wren	: std_logic;"
        wr += "\n\tsignal reg_data_out	:std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);"
        wr += "\n\tsignal byte_index	: integer;"
        wr += "\n\tsignal aw_en	: std_logic;\n"
        wr += "\nbegin"
        wr += "\n\t-- I/O Connections assignments\n"
        wr += "\n\tS_AXI_AWREADY	<= axi_awready;"
        wr += "\n\tS_AXI_WREADY	<= axi_wready;"
        wr += "\n\tS_AXI_BRESP	<= axi_bresp;"
        wr += "\n\tS_AXI_BVALID	<= axi_bvalid;"
        wr += "\n\tS_AXI_ARREADY	<= axi_arready;"
        wr += "\n\tS_AXI_RDATA	<= axi_rdata;"
        wr += "\n\tS_AXI_RRESP	<= axi_rresp;"
        wr += "\n\tS_AXI_RVALID	<= axi_rvalid;"
        wr += "\n\t-- Implement axi_awready generation"
        wr += "\n\t-- axi_awready is asserted for one S_AXI_ACLK clock cycle when both"
        wr += "\n\t-- S_AXI_AWVALID and S_AXI_WVALID are asserted. axi_awready is"
        wr += "\n\t-- de-asserted when reset is low.\n"
        wr += "\n\tprocess (S_AXI_ACLK)"
        wr += "\n\tbegin"
        wr += "\n\t\tif rising_edge(S_AXI_ACLK) then "
        wr += "\n\t\t\tif S_AXI_ARESETN = '0' then"
        wr += "\n\t\t\t\taxi_awready <= '0';"
        wr += "\n\t\t\t\taw_en <= '1';"
        wr += "\n\t\t\telse"
        wr += "\n\t\t\t\tif (axi_awready = '0' and S_AXI_AWVALID = '1' and S_AXI_WVALID = '1' and aw_en = '1') then"
        wr += "\n\t\t\t\t-- slave is ready to accept write address when"
        wr += "\n\t\t\t\t-- there is a valid write address and write data"
        wr += "\n\t\t\t\t-- on the write address and data bus. This design" 
        wr += "\n\t\t\t\t-- expects no outstanding transactions. "
        wr += "\n\t\t\t\t\taxi_awready <= '1';"
        wr += "\n\t\t\t\t\taw_en <= '0';"
        wr += "\n\t\t\t\telsif (S_AXI_BREADY = '1' and axi_bvalid = '1') then"
        wr += "\n\t\t\t\t\taw_en <= '1';"
        wr += "\n\t\t\t\t\taxi_awready <= '0';"
        wr += "\n\t\t\t\telse"
        wr += "\n\t\t\t\t\taxi_awready <= '0';"
        wr += "\n\t\t\t\tend if;"
        wr += "\n\t\t\tend if;"
        wr += "\n\t\tend if;"
        wr += "\n\tend process;\n"
        wr += "\n\t-- Implement axi_awaddr latching"
        wr += "\n\t-- This process is used to latch the address when both "
        wr += "\n\t-- S_AXI_AWVALID and S_AXI_WVALID are valid. \n"
        wr += "\n\tprocess (S_AXI_ACLK)"
        wr += "\n\tbegin"
        wr += "\n\t\tif rising_edge(S_AXI_ACLK) then "
        wr += "\n\t\t\tif S_AXI_ARESETN = '0' then"
        wr += "\n\t\t\t\taxi_awaddr <= (others => '0');"
        wr += "\n\t\t\telse"
        wr += "\n\t\t\t\tif (axi_awready = '0' and S_AXI_AWVALID = '1' and S_AXI_WVALID = '1' and aw_en = '1') then"
        wr += "\n\t\t\t\t-- Write Address latching"
        wr += "\n\t\t\t\t\taxi_awaddr <= S_AXI_AWADDR;"
        wr += "\n\t\t\t\tend if;"
        wr += "\n\t\t\tend if;"
        wr += "\n\t\tend if;   "                
        wr += "\n\tend process; \n"
        wr += "\n\t-- Implement axi_wready generation"
        wr += "\n\t-- axi_wready is asserted for one S_AXI_ACLK clock cycle when both"
        wr += "\n\t-- S_AXI_AWVALID and S_AXI_WVALID are asserted. axi_wready is "
        wr += "\n\t-- de-asserted when reset is low. \n"
        wr += "\n\tprocess (S_AXI_ACLK)"
        wr += "\n\t\tbegin"
        wr += "\n\t\t\tif rising_edge(S_AXI_ACLK) then "
        wr += "\n\t\t\t\tif S_AXI_ARESETN = '0' then"
        wr += "\n\t\t\t\t\taxi_wready <= '0';"
        wr += "\n\t\t\t\telse"
        wr += "\n\t\t\t\t\tif (axi_wready = '0' and S_AXI_WVALID = '1' and S_AXI_AWVALID = '1' and aw_en = '1') then"
        wr += "\n\t\t\t\t\t\t-- slave is ready to accept write data when "
        wr += "\n\t\t\t\t\t\t-- there is a valid write address and write data"
        wr += "\n\t\t\t\t\t\t-- on the write address and data bus. This design" 
        wr += "\n\t\t\t\t\t\t-- expects no outstanding transactions.           "
        wr += "\n\t\t\t\t\t\taxi_wready <= '1';"
        wr += "\n\t\t\t\t\telse"
        wr += "\n\t\t\t\t\t\taxi_wready <= '0';"
        wr += "\n\t\t\t\t\tend if;"
        wr += "\n\t\t\t\tend if;"
        wr += "\n\t\t\tend if;"
        wr += "\n\t\tend process; \n"
        wr += "\n\t-- Implement memory mapped register select and write logic generation"
        wr += "\n\t-- The write data is accepted and written to memory mapped registers when"
        wr += "\n\t-- axi_awready, S_AXI_WVALID, axi_wready and S_AXI_WVALID are asserted. Write strobes are used to"
        wr += "\n\t-- select byte enables of slave registers while writing."
        wr += "\n\t-- These registers are cleared when reset (active low) is applied."
        wr += "\n\t-- Slave register write enable is asserted when valid address and data are available"
        wr += "\n\t-- and the slave is ready to accept the write address and write data."
        wr += "\n\tslv_reg_wren <= axi_wready and S_AXI_WVALID and axi_awready and S_AXI_AWVALID ;\n"
        wr += "\n\tprocess (S_AXI_ACLK)"
        wr += "\n\tvariable loc_addr :std_logic_vector(OPT_MEM_ADDR_BITS downto 0); "
        wr += "\n\tbegin"
        wr += "\n\t\tif rising_edge(S_AXI_ACLK) then "
        wr += "\n\t\tif S_AXI_ARESETN = '0' then"
        wr += "\n\t\t\tslv_reg0 <= (others => '0');"
        wr += "\n\t\t\tslv_reg1 <= (others => '0');"
        wr += "\n\t\t\tslv_reg2 <= (others => '0');"
        wr += "\n\t\t\tslv_reg3 <= (others => '0');"
        wr += "\n\t\telse"
        wr += "\n\t\t\tloc_addr := axi_awaddr(ADDR_LSB + OPT_MEM_ADDR_BITS downto ADDR_LSB);"
        wr += "\n\t\t\tif (slv_reg_wren = '1') then"
        wr += "\n\t\t\t\tcase loc_addr is"
        wr += "\n\t\t\t\t\twhen b\"00\" =>"
        wr += "\n\t\t\t\t\t\tfor byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop"
        wr += "\n\t\t\t\t\t\t\tif ( S_AXI_WSTRB(byte_index) = '1' ) then"
        wr += "\n\t\t\t\t\t\t\t-- Respective byte enables are asserted as per write strobes                   "
        wr += "\n\t\t\t\t\t\t\t-- slave registor 0"
        wr += "\n\t\t\t\t\t\t\t\tslv_reg0(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);"
        wr += "\n\t\t\t\t\t\t\tend if;"
        wr += "\n\t\t\t\t\t\tend loop;"
        wr += "\n\t\t\t\t\twhen b\"01\" =>"
        wr += "\n\t\t\t\t\t\tfor byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop"
        wr += "\n\t\t\t\t\t\t\tif ( S_AXI_WSTRB(byte_index) = '1' ) then"
        wr += "\n\t\t\t\t\t\t\t-- Respective byte enables are asserted as per write strobes                   "
        wr += "\n\t\t\t\t\t\t\t-- slave registor 1"
        wr += "\n\t\t\t\t\t\t\t\tslv_reg1(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);"
        wr += "\n\t\t\t\t\t\t\tend if;"
        wr += "\n\t\t\t\t\t\tend loop;"
        wr += "\n\t\t\t\t\twhen b\"10\" =>"
        wr += "\n\t\t\t\t\t\tfor byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop"
        wr += "\n\t\t\t\t\t\t\tif ( S_AXI_WSTRB(byte_index) = '1' ) then"
        wr += "\n\t\t\t\t\t\t\t\t-- Respective byte enables are asserted as per write strobes                   "
        wr += "\n\t\t\t\t\t\t\t\t-- slave registor 2"
        wr += "\n\t\t\t\t\t\t\t\tslv_reg2(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);"
        wr += "\n\t\t\t\t\t\t\tend if;"
        wr += "\n\t\t\t\t\t\tend loop;"
        wr += "\n\t\t\t\t\twhen b\"11\" =>"
        wr += "\n\t\t\t\t\t\tfor byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop"
        wr += "\n\t\t\t\t\t\t\tif ( S_AXI_WSTRB(byte_index) = '1' ) then"
        wr += "\n\t\t\t\t\t\t\t-- Respective byte enables are asserted as per write strobes                   "
        wr += "\n\t\t\t\t\t\t\t-- slave registor 3"
        wr += "\n\t\t\t\t\t\t\t\tslv_reg3(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);"
        wr += "\n\t\t\t\t\t\t\tend if;"
        wr += "\n\t\t\t\t\t\tend loop;"
        wr += "\n\t\t\t\t\twhen others =>"
        wr += "\n\t\t\t\t\t\tslv_reg0 <= slv_reg0;"
        wr += "\n\t\t\t\t\t\tslv_reg1 <= slv_reg1;"
        wr += "\n\t\t\t\t\t\tslv_reg2 <= slv_reg2;"
        wr += "\n\t\t\t\t\t\tslv_reg3 <= slv_reg3;"
        wr += "\n\t\t\t\t\tend case;"
        wr += "\n\t\t\t\tend if;"
        wr += "\n\t\t\tend if;"
        wr += "\n\t\tend if;   "                
        wr += "\n\tend process; \n"
        wr += "\n\t-- Implement write response logic generation"
        wr += "\n\t-- The write response and response valid signals are asserted by the slave "
        wr += "\n\t-- when axi_wready, S_AXI_WVALID, axi_wready and S_AXI_WVALID are asserted. " 
        wr += "\n\t-- This marks the acceptance of address and indicates the status of "
        wr += "\n\t-- write transaction.\n"
        wr += "\n\tprocess (S_AXI_ACLK)"
        wr += "\n\tbegin"
        wr += "\n\t\tif rising_edge(S_AXI_ACLK) then "
        wr += "\n\t\t\tif S_AXI_ARESETN = '0' then"
        wr += "\n\t\t\t\taxi_bvalid  <= '0';"
        wr += "\n\t\t\t\taxi_bresp   <= \"00\"; --need to work more on the responses"
        wr += "\n\t\t\telse"
        wr += "\n\t\t\t\tif (axi_awready = '1' and S_AXI_AWVALID = '1' and axi_wready = '1' and S_AXI_WVALID = '1' and axi_bvalid = '0'  ) then"
        wr += "\n\t\t\t\t\taxi_bvalid <= '1';"
        wr += "\n\t\t\t\t\taxi_bresp  <= \"00\";" 
        wr += "\n\t\t\t\telsif (S_AXI_BREADY = '1' and axi_bvalid = '1') then   --check if bready is asserted while bvalid is high)"
        wr += "\n\t\t\t\t\taxi_bvalid <= '0';                                 -- (there is a possibility that bready is always asserted high)"
        wr += "\n\t\t\t\tend if;"
        wr += "\n\t\t\tend if;"
        wr += "\n\t\tend if;   "                
        wr += "\n\tend process; \n"
        wr += "\n\t-- Implement axi_arready generation"
        wr += "\n\t-- axi_arready is asserted for one S_AXI_ACLK clock cycle when"
        wr += "\n\t-- S_AXI_ARVALID is asserted. axi_awready is "
        wr += "\n\t-- de-asserted when reset (active low) is asserted. "
        wr += "\n\t-- The read address is also latched when S_AXI_ARVALID is "
        wr += "\n\t-- asserted. axi_araddr is reset to zero on reset assertion.\n"
        wr += "\n\tprocess (S_AXI_ACLK)"
        wr += "\n\t\tbegin"
        wr += "\n\t\tif rising_edge(S_AXI_ACLK) then "
        wr += "\n\t\t\tif S_AXI_ARESETN = '0' then"
        wr += "\n\t\t\t\taxi_arready <= '0';"
        wr += "\n\t\t\t\taxi_araddr  <= (others => '1');"
        wr += "\n\t\t\telse"
        wr += "\n\t\t\t\tif (axi_arready = '0' and S_AXI_ARVALID = '1') then"
        wr += "\n\t\t\t\t\t-- indicates that the slave has acceped the valid read address"
        wr += "\n\t\t\t\t\taxi_arready <= '1';"
        wr += "\n\t\t\t\t\t-- Read Address latching "
        wr += "\n\t\t\t\t\taxi_araddr  <= S_AXI_ARADDR;           "
        wr += "\n\t\t\t\telse"
        wr += "\n\t\t\t\t\taxi_arready <= '0';"
        wr += "\n\t\t\t\tend if;"
        wr += "\n\t\t\tend if;"
        wr += "\n\t\tend if;   "                
        wr += "\n\tend process; \n"
        wr += "\n\t-- Implement axi_arvalid generation"
        wr += "\n\t-- axi_rvalid is asserted for one S_AXI_ACLK clock cycle when both "
        wr += "\n\t-- S_AXI_ARVALID and axi_arready are asserted. The slave registers "
        wr += "\n\t-- data are available on the axi_rdata bus at this instance. The "
        wr += "\n\t-- assertion of axi_rvalid marks the validity of read data on the "
        wr += "\n\t-- bus and axi_rresp indicates the status of read transaction.axi_rvalid "
        wr += "\n\t-- is deasserted on reset (active low). axi_rresp and axi_rdata are "
        wr += "\n\t-- cleared to zero on reset (active low).  "
        wr += "\n\tprocess (S_AXI_ACLK)"
        wr += "\n\tbegin"
        wr += "\n\t\tif rising_edge(S_AXI_ACLK) then"
        wr += "\n\t\t\tif S_AXI_ARESETN = '0' then"
        wr += "\n\t\t\t\taxi_rvalid <= '0';"
        wr += "\n\t\t\t\taxi_rresp  <= \"00\";"
        wr += "\n\t\t\telse"
        wr += "\n\t\t\t\tif (axi_arready = '1' and S_AXI_ARVALID = '1' and axi_rvalid = '0') then"
        wr += "\n\t\t\t\t\t-- Valid read data is available at the read data bus"
        wr += "\n\t\t\t\t\taxi_rvalid <= '1';"
        wr += "\n\t\t\t\t\taxi_rresp  <= \"00\"; -- 'OKAY' response"
        wr += "\n\t\t\t\telsif (axi_rvalid = '1' and S_AXI_RREADY = '1') then"
        wr += "\n\t\t\t\t\t-- Read data is accepted by the master"
        wr += "\n\t\t\t\t\taxi_rvalid <= '0';"
        wr += "\n\t\t\t\tend if;            "
        wr += "\n\t\t\tend if;"
        wr += "\n\t\tend if;"
        wr += "\n\tend process;\n"
        wr += "\n\t-- Implement memory mapped register select and read logic generation"
        wr += "\n\t-- Slave register read enable is asserted when valid address is available"
        wr += "\n\t-- and the slave is ready to accept the read address."
        wr += "\n\tslv_reg_rden <= axi_arready and S_AXI_ARVALID and (not axi_rvalid) ;\n"
        wr += "\n\tprocess (slv_reg0, slv_reg1, slv_reg2, slv_reg3, axi_araddr, S_AXI_ARESETN, slv_reg_rden)"
        wr += "\n\tvariable loc_addr :std_logic_vector(OPT_MEM_ADDR_BITS downto 0);"
        wr += "\n\tbegin"
        wr += "\n\t-- Address decoding for reading registers"
        wr += "\n\t\tloc_addr := axi_araddr(ADDR_LSB + OPT_MEM_ADDR_BITS downto ADDR_LSB);"
        wr += "\n\t\tcase loc_addr is"
        wr += "\n\t\t\twhen b\"00\" =>"
        wr += "\n\t\t\t\treg_data_out <= slv_reg0;"
        wr += "\n\t\t\twhen b\"01\" =>"
        wr += "\n\t\t\t\treg_data_out <= slv_reg1;"
        wr += "\n\t\t\twhen b\"10\" =>"
        wr += "\n\t\t\t\treg_data_out <= slv_reg2;"
        wr += "\n\t\t\twhen b\"11\" =>"
        wr += "\n\t\t\t\treg_data_out <= slv_reg3;"
        wr += "\n\t\t\twhen others =>"
        wr += "\n\t\t\t\treg_data_out  <= (others => '0');"
        wr += "\n\t\tend case;"
        wr += "\n\tend process; \n"
        wr += "\n\t-- Output register or memory read data"
        wr += "\n\tprocess( S_AXI_ACLK ) is"
        wr += "\n\tbegin"
        wr += "\n\t\tif (rising_edge (S_AXI_ACLK)) then"
        wr += "\n\t\t\tif ( S_AXI_ARESETN = '0' ) then"
        wr += "\n\t\t\t\taxi_rdata  <= (others => '0');"
        wr += "\n\t\t\telse"
        wr += "\n\t\t\t\tif (slv_reg_rden = '1') then"
        wr += "\n\t\t\t\t\t-- When there is a valid read address (S_AXI_ARVALID) with "
        wr += "\n\t\t\t\t\t-- acceptance of read address by the slave (axi_arready), "
        wr += "\n\t\t\t\t\t-- output the read dada "
        wr += "\n\t\t\t\t\t-- Read address mux"
        wr += "\n\t\t\t\t\taxi_rdata <= reg_data_out;     -- register read data"
        wr += "\n\t\t\t\tend if;   "
        wr += "\n\t\t\tend if;"
        wr += "\n\t\tend if;"
        wr += "\n\tend process;\n"
        wr += "\n\t\t-- Add user logic here\n"
        wr += "\n\t\t-- User logic ends\n"
        wr += "\nend arch_" + self.name + ";\n"

        return wr

    def generate_imp(self):
        wr = ""
        return wr

    def generate_component(self):
        wr = ""
        return wr

if __name__=="__main__":
    axi = AXI_generate("miIP", "hola")
    axi.generate_AXI()